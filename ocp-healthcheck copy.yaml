

# Check ports on master nodes
    - name: check if ports are open on masters
      wait_for:
        port: "{{ item }}"
        delay: 5
        timeout: 10
        msg: "Timeout waiting for {{ item }} to respond"
      register: port_check
      ignore_errors: true
      with_items:
        - 53
        - 22
        - 8443

# Check master config stuff
    - name: get subdomain
      shell: cat /etc/origin/master/master-config.yaml | grep -i subDomain | awk '{print$2}' | tail -1
      register: subDomain
      changed_when: false
    - debug: msg={{ subDomain.stdout }}

    - name: get serviceNetworkCIDR
      shell: cat /etc/origin/master/master-config.yaml | grep -i serviceNetworkCIDR | awk '{print$2}' | tail -1
      register: serviceNetworkCIDR
      changed_when: false
    - debug: msg={{ serviceNetworkCIDR.stdout }}

    - name: Check wildcard
      shell: |
        dig +short test.{{ subDomain.stdout }}
        dig +short test.router.default.svc.cluster.local
      register: shell
      changed_when: false
    - debug: msg={{ shell.stdout  }}

    - name: check nameserver
      shell: cat /etc/resolv.conf  | grep -v '^#' | grep nameserver | awk '{print $2}'
      register: nameserver
      changed_when: false

    - name: check dns
      shell: dig {{ item }} @{{ nameserver.stdout }} +short
      register: dnscheck
      with_items: "{{ groups['masters'] }}"
      changed_when: false

    - name: Fail if result is empty
      fail:
        msg: "DNS answer ({{ item.stdout }}) is empty"
      when: '"172" not in item.stdout'
      with_items: "{{ dnscheck.results }}"
      changed_when: false


# Check etcd health
    - name: determine number of etcd cluster members openshift recognizes
      local_action: shell oc get cs | grep etcd | awk '{print $1}'
      register: oc_output
      changed_when: false
    - set_fact:
        etcd_members: "{{ oc_output.stdout.split('\n')|list }}"

    - name: Check etcd member health
      command: >
        curl -kv
        -H "Authorization: Bearer {{ ocp_token }}"
        {{ master_api }}/api/v1/componentstatuses/{{ item }}
      with_items:
        - "{{ etcd_members }}"
      register: etcdcheck
      failed_when:
        - '"Healthy" not in etcdcheck.stdout'
      changed_when: false
      args:
        warn: no

# Check default project status
    - name: Check status of default project
      command: oc status -n default
      run_once: true
      delegate_to: localhost
      register: default_status
      changed_when: false
      failed_when: "'registry deploys' not in default_status.stdout or 'svc/kubernetes' not in default_status.stdout or 'console deploys' not in default_status.stdout or 'dc/router deploys' not in default_status.stdout"

# Check API endpoints
    - name: Check OCP Master API
      uri:
        url: "{{ master_api }}/healthz"
        method: GET
        return_content: yes
        headers:
          Authorization: "Bearer {{ ocp_token }}"
        validate_certs: no
      register: return_msg
      changed_when: false
      failed_when: "'OK' not in return_msg.msg"

    - name: Check registry API
      uri:
        url: http://docker-registry.default.svc.cluster.local:5000/healthz
        method: GET
        return_content: yes
      register: return_msg
      run_once: true
      changed_when: false
      failed_when: '"OK" not in return_msg.msg'

# Check Docker registry
    - name: Check service address of registry
      shell: dig +short docker-registry.default.svc.cluster.local
      register: digoutput
      changed_when: false

    - name: Check if skydns is working correctly
      shell: oc get svc/docker-registry -n default --no-headers | awk '{print$2}'
      register: skydnsoutput
      changed_when: false
      failed_when: digoutput.stdout != skydnsoutput.stdout

# Check OCP version and client
    - name: Check openshift version
      shell: /usr/local/bin/oc version | awk 'NR==1' | cut -dv -f2-
      register: oc_version
      changed_when: false

    - name: Check oc client version on Ansible jumphost
      shell: oc version | awk 'NR==1' | cut -dv -f2-
      run_once: true
      delegate_to: localhost
      register: oc_client_binary_version
      ignore_errors: True
      changed_when: false
      failed_when: oc_client_binary_version != oc_version

# Check systemd services on masters
    - name: Check Master API Service
      command: systemctl is-active atomic-openshift-master-api
      register: is_active
      changed_when: false
      failed_when: "'unknown' in is_active.stdout"

    - name: Check Master Controllers Service
      command: systemctl is-active atomic-openshift-master-controllers
      register: is_active
      changed_when: false
      failed_when: "'unknown' in is_active.stdout"


- hosts: nodes
  gather_facts: no
  tasks:

    - name: check if ports are open on nodes
      wait_for:
        port: "{{ item }}"
        delay: 5
        timeout: 10
        msg: "Timeout waiting for {{ item }} to respond"
      register: port_check
      ignore_errors: true
      with_items:
        - 53
        - 22
        - 10250

    - name: Check IP forwarding
      command: sysctl net.ipv4.ip_forward
      changed_when: false

    - name: Check openvswitch config
      command: ovs-vsctl list-br
      register: ovsoutput
      changed_when: false
      failed_when: '"br0" not in ovsoutput.stdout'

    - name: Check MTU of br0 interface
      shell: ifconfig br0 | grep mtu | awk '{print$4}'
      ignore_errors: True
      changed_when: false
      register: br0_mtu

    - name: Check MTU in node-config
      shell: "grep -rn --include=*.yaml \"mtu\" /etc/origin/node/node-config.yaml | awk '{print$3}'"
      register: node_mtu
      changed_when: false
      failed_when: br0_mtu.stdout < node_mtu.stdout

    - name: Check kernel of node
      command: uname -a
      register: kernel
      changed_when: false
    - debug: msg={{ kernel.stdout }}

    - name: Check RHEL of node
      command: cat /etc/redhat-release
      register: redhat_release
      changed_when: false
      failed_when: "'7.5' not in redhat_release.stdout"

    - name: Check cpu
      command: less /proc/cpuinfo
      changed_when: false

    - name: Check overcommit memory
      command: sysctl vm.overcommit_memory
      register: vm_overcommit_memory
      changed_when: false
      failed_when: "'vm.overcommit_memory = 1' not in vm_overcommit_memory.stdout"

    - name: Check vm.panic_on_oom
      command: sysctl vm.panic_on_oom
      register: vm_panic_on_oom
      changed_when: false
      failed_when: "'vm.panic_on_oom = 0' not in vm_panic_on_oom.stdout"

    - name: Check swapping
      shell: free | grep Swap | awk '{print$2}' | tail -1
      register: swap
      changed_when: false
      failed_when: "swap.stdout != '0'"

    - name: Check SELinux
      command: getenforce
      register: getenforce
      changed_when: false
      failed_when: "'Enforcing' not in getenforce.stdout"

    - name: Check SELinux Config
      command: cat /etc/sysconfig/selinux
      register: selinux_config
      changed_when: false
      failed_when: "'SELINUX=enforcing' not in selinux_config.stdout"

    - name: Display DNS on each node
      command: cat /etc/resolv.conf
      register: shell
      changed_when: false
    - debug: msg={{ shell.stdout  }}

#    - name: Check DNS on node
#      command: dig @{{ serviceNetworkCIDR.stdout }} kubernetes.default.svc.cluster.local
#      register: shell
#      ignore_errors: True


# Check Docker state
    - name: Check docker version
      command: docker version
      register: docker_version
      changed_when: false
      failed_when: "'1.12.6' not in docker_version.stdout"

# Docker Storage may be configured only on nodes.
    - name: Check docker storage driver
      shell: docker info | egrep -i 'storage|pool|space|filesystem'
      register: docker_info
      ignore_errors: True
      changed_when: false
      failed_when: "'devicemapper' not in docker_info.stdout"

    - name: Check docker storage setup
      command: cat /etc/sysconfig/docker-storage-setup
      register: docker_storage_setup
      changed_when: false
      failed_when: "'DEVS=/dev/sdb' not in docker_storage_setup.stdout"

    - name: Check docker storage
      shell: lvs | grep docker-pool | awk '{print$5}'
      register: dockerstorage
      changed_when: false
    - debug:
        msg: "{{ dockerstorage.stdout }}"

    - name: storage
      shell: df -h /var/lib/origin/ | tail -1 | awk '{print$5}'
      register: shell
      changed_when: false
    - debug:  msg={{ shell.stdout  }}

# Check systemd services on nodes
    - name: Check Node Service
      command: systemctl is-active atomic-openshift-node
      register: is_active
      changed_when: false
      failed_when: "'active' != is_active.stdout"

    - name: Check openvswitch
      command: systemctl is-active openvswitch
      register: is_active
      changed_when: false
      failed_when: "'unknown' in is_active.stdout"
